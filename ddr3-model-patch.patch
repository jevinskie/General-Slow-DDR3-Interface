diff -u model-unpatched/1024Mb_ddr3_parameters.vh model/1024Mb_ddr3_parameters.vh
--- model-unpatched/1024Mb_ddr3_parameters.vh
+++ model/1024Mb_ddr3_parameters.vh
@@ -469,7 +469,7 @@
     parameter CWL_MAX          =      10; // CWL        tCK   Maximum CAS Write Latency
 
     // Clock
-    parameter TCK_MAX          =    3300; // tCK        ps    Maximum Clock Cycle Time
+    parameter TCK_MAX          =   40000; // tCK        ps    Maximum Clock Cycle Time
     parameter TCH_AVG_MIN      =    0.47; // tCH        tCK   Minimum Clock High-Level Pulse Width
     parameter TCL_AVG_MIN      =    0.47; // tCL        tCK   Minimum Clock Low-Level Pulse Width
     parameter TCH_AVG_MAX      =    0.53; // tCH        tCK   Maximum Clock High-Level Pulse Width
@@ -594,8 +594,8 @@
     // Simulation parameters
     parameter RZQ              =     240; // termination resistance
     parameter PRE_DEF_PAT      =   8'hAA; // value returned during mpr pre-defined pattern readout
-    parameter STOP_ON_ERROR    =       1; // If set to 1, the model will halt on command sequence/major errors
-    parameter DEBUG            =       1; // Turn on Debug messages
+    parameter STOP_ON_ERROR    =       0; // If set to 1, the model will halt on command sequence/major errors
+    parameter DEBUG            =       0; // Turn on Debug messages
     parameter BUS_DELAY        =       0; // delay in nanoseconds
     parameter RANDOM_OUT_DELAY =       0; // If set to 1, the model will put a random amount of delay on DQ/DQS during reads
     parameter RANDOM_SEED      =   31913; //seed value for random generator.
diff -u model-unpatched/2048Mb_ddr3_parameters.vh model/2048Mb_ddr3_parameters.vh
--- model-unpatched/2048Mb_ddr3_parameters.vh
+++ model/2048Mb_ddr3_parameters.vh
@@ -457,7 +457,7 @@
     parameter CWL_MAX          =      10; // CWL        tCK   Maximum CAS Write Latency
 
     // Clock
-    parameter TCK_MAX          =    3300; // tCK        ps    Maximum Clock Cycle Time
+    parameter TCK_MAX          =   40000; // tCK        ps    Maximum Clock Cycle Time
     parameter TCH_AVG_MIN      =    0.47; // tCH        tCK   Minimum Clock High-Level Pulse Width
     parameter TCL_AVG_MIN      =    0.47; // tCL        tCK   Minimum Clock Low-Level Pulse Width
     parameter TCH_AVG_MAX      =    0.53; // tCH        tCK   Maximum Clock High-Level Pulse Width
@@ -582,8 +582,8 @@
     // Simulation parameters
     parameter RZQ              =     240; // termination resistance
     parameter PRE_DEF_PAT      =   8'hAA; // value returned during mpr pre-defined pattern readout
-    parameter STOP_ON_ERROR    =       1; // If set to 1, the model will halt on command sequence/major errors
-    parameter DEBUG            =       1; // Turn on Debug messages
+    parameter STOP_ON_ERROR    =       0; // If set to 1, the model will halt on command sequence/major errors
+    parameter DEBUG            =       0; // Turn on Debug messages
     parameter BUS_DELAY        =       0; // delay in nanoseconds
     parameter RANDOM_OUT_DELAY =       0; // If set to 1, the model will put a random amount of delay on DQ/DQS during reads
     parameter RANDOM_SEED      =   31913; //seed value for random generator.
diff -u model-unpatched/4096Mb_ddr3_parameters.vh model/4096Mb_ddr3_parameters.vh
--- model-unpatched/4096Mb_ddr3_parameters.vh
+++ model/4096Mb_ddr3_parameters.vh
@@ -457,7 +457,7 @@
     parameter CWL_MAX          =      10; // CWL        tCK   Maximum CAS Write Latency
 
     // Clock
-    parameter TCK_MAX          =    3300; // tCK        ps    Maximum Clock Cycle Time
+    parameter TCK_MAX          =   40000; // tCK        ps    Maximum Clock Cycle Time
     parameter TCH_AVG_MIN      =    0.47; // tCH        tCK   Minimum Clock High-Level Pulse Width
     parameter TCL_AVG_MIN      =    0.47; // tCL        tCK   Minimum Clock Low-Level Pulse Width
     parameter TCH_AVG_MAX      =    0.53; // tCH        tCK   Maximum Clock High-Level Pulse Width
@@ -582,8 +582,8 @@
     // Simulation parameters
     parameter RZQ              =     240; // termination resistance
     parameter PRE_DEF_PAT      =   8'hAA; // value returned during mpr pre-defined pattern readout
-    parameter STOP_ON_ERROR    =       1; // If set to 1, the model will halt on command sequence/major errors
-    parameter DEBUG            =       1; // Turn on Debug messages
+    parameter STOP_ON_ERROR    =       0; // If set to 1, the model will halt on command sequence/major errors
+    parameter DEBUG            =       0; // Turn on Debug messages
     parameter BUS_DELAY        =       0; // delay in nanoseconds
     parameter RANDOM_OUT_DELAY =       0; // If set to 1, the model will put a random amount of delay on DQ/DQS during reads
     parameter RANDOM_SEED      =   31913; //seed value for random generator.
diff -u model-unpatched/8192Mb_ddr3_parameters.vh model/8192Mb_ddr3_parameters.vh
--- model-unpatched/8192Mb_ddr3_parameters.vh
+++ model/8192Mb_ddr3_parameters.vh
@@ -297,7 +297,7 @@
     parameter CWL_MAX          =      10; // CWL        tCK   Maximum CAS Write Latency
 
     // Clock
-    parameter TCK_MAX          =    3300; // tCK        ps    Maximum Clock Cycle Time
+    parameter TCK_MAX          =   40000; // tCK        ps    Maximum Clock Cycle Time
     parameter TCH_AVG_MIN      =    0.47; // tCH        tCK   Minimum Clock High-Level Pulse Width
     parameter TCL_AVG_MIN      =    0.47; // tCL        tCK   Minimum Clock Low-Level Pulse Width
     parameter TCH_AVG_MAX      =    0.53; // tCH        tCK   Maximum Clock High-Level Pulse Width
@@ -423,8 +423,8 @@
     // Simulation parameters
     parameter RZQ              =     240; // termination resistance
     parameter PRE_DEF_PAT      =   8'hAA; // value returned during mpr pre-defined pattern readout
-    parameter STOP_ON_ERROR    =       1; // If set to 1, the model will halt on command sequence/major errors
-    parameter DEBUG            =       1; // Turn on Debug messages
+    parameter STOP_ON_ERROR    =       0; // If set to 1, the model will halt on command sequence/major errors
+    parameter DEBUG            =       0; // Turn on Debug messages
     parameter BUS_DELAY        =       0; // delay in nanoseconds
     parameter RANDOM_OUT_DELAY =       0; // If set to 1, the model will put a random amount of delay on DQ/DQS during reads
     parameter RANDOM_SEED      =   31913; //seed value for random generator.
diff -u model-unpatched/ddr3.v model/ddr3.v
--- model-unpatched/ddr3.v
+++ model/ddr3.v
@@ -1421,7 +1421,7 @@
                         if (mpr_en) begin
                             $display ("%m: at time %t ERROR: %s Failure.  Multipurpose Register must be disabled.", $time, cmd_string[cmd]);
                             if (STOP_ON_ERROR) $stop(0);
-                        end else if (!init_done) begin
+                        end else if (!init_done & dll_en) begin
                             $display ("%m: at time %t ERROR: %s Failure.  Initialization sequence is not complete.", $time, cmd_string[cmd]);
                             if (STOP_ON_ERROR) $stop(0);
                         end else if (active_bank[bank]) begin
@@ -1460,7 +1460,7 @@
                         if (mpr_en) begin
                             $display ("%m: at time %t ERROR: %s Failure.  Multipurpose Register must be disabled.", $time, cmd_string[cmd]);
                             if (STOP_ON_ERROR) $stop(0);
-                        end else if (!init_done) begin
+                        end else if (!init_done & dll_en) begin
                             $display ("%m: at time %t ERROR: %s Failure.  Initialization sequence is not complete.", $time, cmd_string[cmd]);
                             if (STOP_ON_ERROR) $stop(0);
                         end else if (!active_bank[bank])  begin
@@ -1520,7 +1520,7 @@
                         if (mpr_en && (addr[1:0] != 2'b00)) begin
                             $display ("%m: at time %t ERROR: %s Failure.  addr[1:0] must be zero during Multipurpose Register Read.", $time, cmd_string[cmd]);
                             if (STOP_ON_ERROR) $stop(0);
-                        end else if (!init_done) begin
+                        end else if (!init_done & dll_en) begin
                             $display ("%m: at time %t ERROR: %s Failure.  Initialization sequence is not complete.", $time, cmd_string[cmd]);
                             if (STOP_ON_ERROR) $stop(0);
                         end else if (!active_bank[bank] && !mpr_en) begin
@@ -1667,7 +1667,7 @@
                         end else if (odt_state) begin
                             $display ("%m: at time %t ERROR: Self Refresh Failure.  ODT must be off prior to entering Self Refresh", $time);
                             if (STOP_ON_ERROR) $stop(0);
-                        end else if (!init_done) begin
+                        end else if (!init_done & dll_en) begin
                             $display ("%m: at time %t ERROR: Self Refresh Failure.  Initialization sequence is not complete.", $time);
                             if (STOP_ON_ERROR) $stop(0);
                         end else begin
@@ -1701,7 +1701,7 @@
                         if (mpr_en) begin
                             $display ("%m: at time %t ERROR: Power Down Failure.  Multipurpose Register must be disabled.", $time);
                             if (STOP_ON_ERROR) $stop(0);
-                        end else if (!init_done) begin
+                        end else if (!init_done & dll_en) begin
                             $display ("%m: at time %t ERROR: Power Down Failure.  Initialization sequence is not complete.", $time);
                             if (STOP_ON_ERROR) $stop(0);
                         end else begin
@@ -2470,7 +2470,7 @@
     end
 
     task cmd_addr_timing_check;
-    input i;
+    input [4:0] i;
     reg [4:0] i;
     begin
         if (rst_n_in && prev_cke) begin
@@ -2514,7 +2514,7 @@
 
     // Processes to check setup and hold of data signals
     task dm_timing_check;
-    input i;
+    input [4:0] i;
     reg [4:0] i;
     begin
         if (dqs_in_valid) begin
@@ -2565,7 +2565,7 @@
     always @(dm_in[31]) dm_timing_check(31);
 
     task dq_timing_check;
-    input i;
+    input [6:0] i;
     reg [6:0] i;
     begin
         if (dqs_in_valid) begin
@@ -2712,7 +2712,7 @@
     always @(dq_in[127]) dq_timing_check(127);
    
     task dqs_pos_timing_check;
-    input i;
+    input [5:0] i;
     reg [5:0] i;
     reg [4:0] j;
     begin
@@ -2847,7 +2847,7 @@
     always @(negedge dqs_in[63]) if (!dqs_in[63]) dqs_pos_timing_check(63);
    
     task dqs_neg_timing_check;
-    input i;
+    input [5:0] i;
     reg [5:0] i;
     reg [4:0] j;
     begin
