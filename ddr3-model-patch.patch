diff -u model-unpatched/1024Mb_ddr3_parameters.vh model/1024Mb_ddr3_parameters.vh
--- model-unpatched/1024Mb_ddr3_parameters.vh
+++ model/1024Mb_ddr3_parameters.vh
@@ -469,7 +469,7 @@
     parameter CWL_MAX          =      10; // CWL        tCK   Maximum CAS Write Latency
 
     // Clock
-    parameter TCK_MAX          =    3300; // tCK        ps    Maximum Clock Cycle Time
+    parameter TCK_MAX          =   40000; // tCK        ps    Maximum Clock Cycle Time
     parameter TCH_AVG_MIN      =    0.47; // tCH        tCK   Minimum Clock High-Level Pulse Width
     parameter TCL_AVG_MIN      =    0.47; // tCL        tCK   Minimum Clock Low-Level Pulse Width
     parameter TCH_AVG_MAX      =    0.53; // tCH        tCK   Maximum Clock High-Level Pulse Width
@@ -594,8 +594,8 @@
     // Simulation parameters
     parameter RZQ              =     240; // termination resistance
     parameter PRE_DEF_PAT      =   8'hAA; // value returned during mpr pre-defined pattern readout
-    parameter STOP_ON_ERROR    =       1; // If set to 1, the model will halt on command sequence/major errors
-    parameter DEBUG            =       1; // Turn on Debug messages
+    parameter STOP_ON_ERROR    =       0; // If set to 1, the model will halt on command sequence/major errors
+    parameter DEBUG            =       0; // Turn on Debug messages
     parameter BUS_DELAY        =       0; // delay in nanoseconds
     parameter RANDOM_OUT_DELAY =       0; // If set to 1, the model will put a random amount of delay on DQ/DQS during reads
     parameter RANDOM_SEED      =   31913; //seed value for random generator.
diff -u model-unpatched/2048Mb_ddr3_parameters.vh model/2048Mb_ddr3_parameters.vh
--- model-unpatched/2048Mb_ddr3_parameters.vh
+++ model/2048Mb_ddr3_parameters.vh
@@ -457,7 +457,7 @@
     parameter CWL_MAX          =      10; // CWL        tCK   Maximum CAS Write Latency
 
     // Clock
-    parameter TCK_MAX          =    3300; // tCK        ps    Maximum Clock Cycle Time
+    parameter TCK_MAX          =   40000; // tCK        ps    Maximum Clock Cycle Time
     parameter TCH_AVG_MIN      =    0.47; // tCH        tCK   Minimum Clock High-Level Pulse Width
     parameter TCL_AVG_MIN      =    0.47; // tCL        tCK   Minimum Clock Low-Level Pulse Width
     parameter TCH_AVG_MAX      =    0.53; // tCH        tCK   Maximum Clock High-Level Pulse Width
@@ -582,8 +582,8 @@
     // Simulation parameters
     parameter RZQ              =     240; // termination resistance
     parameter PRE_DEF_PAT      =   8'hAA; // value returned during mpr pre-defined pattern readout
-    parameter STOP_ON_ERROR    =       1; // If set to 1, the model will halt on command sequence/major errors
-    parameter DEBUG            =       1; // Turn on Debug messages
+    parameter STOP_ON_ERROR    =       0; // If set to 1, the model will halt on command sequence/major errors
+    parameter DEBUG            =       0; // Turn on Debug messages
     parameter BUS_DELAY        =       0; // delay in nanoseconds
     parameter RANDOM_OUT_DELAY =       0; // If set to 1, the model will put a random amount of delay on DQ/DQS during reads
     parameter RANDOM_SEED      =   31913; //seed value for random generator.
diff -u model-unpatched/4096Mb_ddr3_parameters.vh model/4096Mb_ddr3_parameters.vh
--- model-unpatched/4096Mb_ddr3_parameters.vh
+++ model/4096Mb_ddr3_parameters.vh
@@ -457,7 +457,7 @@
     parameter CWL_MAX          =      10; // CWL        tCK   Maximum CAS Write Latency
 
     // Clock
-    parameter TCK_MAX          =    3300; // tCK        ps    Maximum Clock Cycle Time
+    parameter TCK_MAX          =   40000; // tCK        ps    Maximum Clock Cycle Time
     parameter TCH_AVG_MIN      =    0.47; // tCH        tCK   Minimum Clock High-Level Pulse Width
     parameter TCL_AVG_MIN      =    0.47; // tCL        tCK   Minimum Clock Low-Level Pulse Width
     parameter TCH_AVG_MAX      =    0.53; // tCH        tCK   Maximum Clock High-Level Pulse Width
@@ -582,8 +582,8 @@
     // Simulation parameters
     parameter RZQ              =     240; // termination resistance
     parameter PRE_DEF_PAT      =   8'hAA; // value returned during mpr pre-defined pattern readout
-    parameter STOP_ON_ERROR    =       1; // If set to 1, the model will halt on command sequence/major errors
-    parameter DEBUG            =       1; // Turn on Debug messages
+    parameter STOP_ON_ERROR    =       0; // If set to 1, the model will halt on command sequence/major errors
+    parameter DEBUG            =       0; // Turn on Debug messages
     parameter BUS_DELAY        =       0; // delay in nanoseconds
     parameter RANDOM_OUT_DELAY =       0; // If set to 1, the model will put a random amount of delay on DQ/DQS during reads
     parameter RANDOM_SEED      =   31913; //seed value for random generator.
diff -u model-unpatched/8192Mb_ddr3_parameters.vh model/8192Mb_ddr3_parameters.vh
--- model-unpatched/8192Mb_ddr3_parameters.vh
+++ model/8192Mb_ddr3_parameters.vh
@@ -297,7 +297,7 @@
     parameter CWL_MAX          =      10; // CWL        tCK   Maximum CAS Write Latency
 
     // Clock
-    parameter TCK_MAX          =    3300; // tCK        ps    Maximum Clock Cycle Time
+    parameter TCK_MAX          =   40000; // tCK        ps    Maximum Clock Cycle Time
     parameter TCH_AVG_MIN      =    0.47; // tCH        tCK   Minimum Clock High-Level Pulse Width
     parameter TCL_AVG_MIN      =    0.47; // tCL        tCK   Minimum Clock Low-Level Pulse Width
     parameter TCH_AVG_MAX      =    0.53; // tCH        tCK   Maximum Clock High-Level Pulse Width
@@ -423,8 +423,8 @@
     // Simulation parameters
     parameter RZQ              =     240; // termination resistance
     parameter PRE_DEF_PAT      =   8'hAA; // value returned during mpr pre-defined pattern readout
-    parameter STOP_ON_ERROR    =       1; // If set to 1, the model will halt on command sequence/major errors
-    parameter DEBUG            =       1; // Turn on Debug messages
+    parameter STOP_ON_ERROR    =       0; // If set to 1, the model will halt on command sequence/major errors
+    parameter DEBUG            =       0; // Turn on Debug messages
     parameter BUS_DELAY        =       0; // delay in nanoseconds
     parameter RANDOM_OUT_DELAY =       0; // If set to 1, the model will put a random amount of delay on DQ/DQS during reads
     parameter RANDOM_SEED      =   31913; //seed value for random generator.
diff -u model-unpatched/ddr3.v model/ddr3.v
--- model-unpatched/ddr3.v
+++ model/ddr3.v
@@ -490,23 +490,47 @@
     reg     [63:0] prev_dqs_in;
     reg            diff_ck;
 
-    always @(rst_n  ) rst_n_in   <= #BUS_DELAY rst_n;
-    always @(ck     ) ck_in      <= #BUS_DELAY ck;
-    always @(ck_n   ) ck_n_in    <= #BUS_DELAY ck_n;
+    if (BUS_DELAY) begin
+        always @(rst_n  ) rst_n_in   <= #BUS_DELAY rst_n;
+        always @(ck     ) ck_in      <= #BUS_DELAY ck;
+        always @(ck_n   ) ck_n_in    <= #BUS_DELAY ck_n;
+    end else begin
+        always @(rst_n  ) rst_n_in   <= rst_n;
+        always @(ck     ) ck_in      <= ck;
+        always @(ck_n   ) ck_n_in    <= ck_n;
+    end
 
-    always @(cke    ) 
-      cke_in     <= #BUS_DELAY cke;
+    if (BUS_DELAY) begin
+        always @(cke    ) 
+          cke_in     <= #BUS_DELAY cke;
+    end else begin
+        always @(cke    ) 
+          cke_in     <= cke;
+    end
 
-    always @(cs_n   ) cs_n_in    <= #BUS_DELAY cs_n;
-    always @(ras_n  ) ras_n_in   <= #BUS_DELAY ras_n;
-    always @(cas_n  ) cas_n_in   <= #BUS_DELAY cas_n;
-    always @(we_n   ) we_n_in    <= #BUS_DELAY we_n;
-    always @(dm_tdqs) dm_in      <= #BUS_DELAY dm_tdqs;
-    always @(ba     ) ba_in      <= #BUS_DELAY ba;
-    always @(addr   ) addr_in    <= #BUS_DELAY addr;
-    always @(dq     ) dq_in      <= #BUS_DELAY dq;
-    always @(dqs or dqs_n) dqs_in <= #BUS_DELAY (dqs_n<<32) | dqs;
-    always @(odt    ) if (!feature_odt_hi) odt_in     <= #BUS_DELAY odt;
+    if (BUS_DELAY) begin
+        always @(cs_n   ) cs_n_in    <= #BUS_DELAY cs_n;
+        always @(ras_n  ) ras_n_in   <= #BUS_DELAY ras_n;
+        always @(cas_n  ) cas_n_in   <= #BUS_DELAY cas_n;
+        always @(we_n   ) we_n_in    <= #BUS_DELAY we_n;
+        always @(dm_tdqs) dm_in      <= #BUS_DELAY dm_tdqs;
+        always @(ba     ) ba_in      <= #BUS_DELAY ba;
+        always @(addr   ) addr_in    <= #BUS_DELAY addr;
+        always @(dq     ) dq_in      <= #BUS_DELAY dq;
+        always @(dqs or dqs_n) dqs_in <= #BUS_DELAY (dqs_n<<32) | dqs;
+        always @(odt    ) if (!feature_odt_hi) odt_in     <= #BUS_DELAY odt;
+    end else begin
+        always @(cs_n   ) cs_n_in    <= cs_n;
+        always @(ras_n  ) ras_n_in   <= ras_n;
+        always @(cas_n  ) cas_n_in   <= cas_n;
+        always @(we_n   ) we_n_in    <= we_n;
+        always @(dm_tdqs) dm_in      <= dm_tdqs;
+        always @(ba     ) ba_in      <= ba;
+        always @(addr   ) addr_in    <= addr;
+        always @(dq     ) dq_in      <= dq;
+        always @(dqs or dqs_n) dqs_in <= (dqs_n<<32) | dqs;
+        always @(odt    ) if (!feature_odt_hi) odt_in     <= odt;
+    end
     // create internal clock
     always @(posedge ck_in) diff_ck <= ck_in;
     always @(posedge ck_n_in) diff_ck <= ~ck_n_in;
@@ -651,7 +675,11 @@
     );
         integer code;
         integer offset;
+        `ifdef VERILATOR
+        string msg;
+        `else
         reg [1024:1] msg;
+        `endif
         reg [RFF_BITS:1] read_value;
     
         begin
@@ -1394,9 +1422,9 @@
                                             end else begin
                                                 if (DEBUG) $display ("%m: at time %t INFO: %s bank %d", $time, cmd_string[cmd], i);
                                                 active_bank[i] = 1'b0;
-                                                tm_bank_precharge[i] <= $time;
-                                                tm_precharge <= $time;
-                                                ck_precharge <= ck_cntr;
+                                                tm_bank_precharge[i] = $time;
+                                                tm_precharge = $time;
+                                                ck_precharge = ck_cntr;
                                             end
                                         end
                                     end
@@ -1421,7 +1449,7 @@
                         if (mpr_en) begin
                             $display ("%m: at time %t ERROR: %s Failure.  Multipurpose Register must be disabled.", $time, cmd_string[cmd]);
                             if (STOP_ON_ERROR) $stop(0);
-                        end else if (!init_done) begin
+                        end else if (!init_done & dll_en) begin
                             $display ("%m: at time %t ERROR: %s Failure.  Initialization sequence is not complete.", $time, cmd_string[cmd]);
                             if (STOP_ON_ERROR) $stop(0);
                         end else if (active_bank[bank]) begin
@@ -1460,7 +1488,7 @@
                         if (mpr_en) begin
                             $display ("%m: at time %t ERROR: %s Failure.  Multipurpose Register must be disabled.", $time, cmd_string[cmd]);
                             if (STOP_ON_ERROR) $stop(0);
-                        end else if (!init_done) begin
+                        end else if (!init_done & dll_en) begin
                             $display ("%m: at time %t ERROR: %s Failure.  Initialization sequence is not complete.", $time, cmd_string[cmd]);
                             if (STOP_ON_ERROR) $stop(0);
                         end else if (!active_bank[bank])  begin
@@ -1520,7 +1548,7 @@
                         if (mpr_en && (addr[1:0] != 2'b00)) begin
                             $display ("%m: at time %t ERROR: %s Failure.  addr[1:0] must be zero during Multipurpose Register Read.", $time, cmd_string[cmd]);
                             if (STOP_ON_ERROR) $stop(0);
-                        end else if (!init_done) begin
+                        end else if (!init_done & dll_en) begin
                             $display ("%m: at time %t ERROR: %s Failure.  Initialization sequence is not complete.", $time, cmd_string[cmd]);
                             if (STOP_ON_ERROR) $stop(0);
                         end else if (!active_bank[bank] && !mpr_en) begin
@@ -1667,7 +1695,7 @@
                         end else if (odt_state) begin
                             $display ("%m: at time %t ERROR: Self Refresh Failure.  ODT must be off prior to entering Self Refresh", $time);
                             if (STOP_ON_ERROR) $stop(0);
-                        end else if (!init_done) begin
+                        end else if (!init_done & dll_en) begin
                             $display ("%m: at time %t ERROR: Self Refresh Failure.  Initialization sequence is not complete.", $time);
                             if (STOP_ON_ERROR) $stop(0);
                         end else begin
@@ -1701,7 +1729,7 @@
                         if (mpr_en) begin
                             $display ("%m: at time %t ERROR: Power Down Failure.  Multipurpose Register must be disabled.", $time);
                             if (STOP_ON_ERROR) $stop(0);
-                        end else if (!init_done) begin
+                        end else if (!init_done & dll_en) begin
                             $display ("%m: at time %t ERROR: Power Down Failure.  Initialization sequence is not complete.", $time);
                             if (STOP_ON_ERROR) $stop(0);
                         end else begin
@@ -2118,10 +2146,10 @@
                                 // the internal precharge happens (not at the next rising clock edge after this event).
                                 if ($time - tm_bank_read_end[i] < TRTP) begin
                                     if (DEBUG) $display ("%m: at time %t INFO: Auto Precharge bank %d", tm_bank_read_end[i] + TRTP, i);
-                                    active_bank[i] <= #(tm_bank_read_end[i] + TRTP - $time) 0;
-                                    auto_precharge_bank[i] <= #(tm_bank_read_end[i] + TRTP - $time) 0;
-                                    tm_bank_precharge[i] <= #(tm_bank_read_end[i] + TRTP - $time) tm_bank_read_end[i] + TRTP;
-                                    tm_precharge <= #(tm_bank_read_end[i] + TRTP - $time) tm_bank_read_end[i] + TRTP;
+                                    active_bank[i] = #(tm_bank_read_end[i] + TRTP - $time) 0;
+                                    auto_precharge_bank[i] = #(tm_bank_read_end[i] + TRTP - $time) 0;
+                                    tm_bank_precharge[i] = #(tm_bank_read_end[i] + TRTP - $time) tm_bank_read_end[i] + TRTP;
+                                    tm_precharge = #(tm_bank_read_end[i] + TRTP - $time) tm_bank_read_end[i] + TRTP;
                                     ck_precharge = ck_cntr;
                                 end else begin
                                     if (DEBUG) $display ("%m: at time %t INFO: Auto Precharge bank %d", $time, i);
@@ -2470,7 +2498,7 @@
     end
 
     task cmd_addr_timing_check;
-    input i;
+    input [4:0] i;
     reg [4:0] i;
     begin
         if (rst_n_in && prev_cke) begin
@@ -2514,7 +2542,7 @@
 
     // Processes to check setup and hold of data signals
     task dm_timing_check;
-    input i;
+    input [4:0] i;
     reg [4:0] i;
     begin
         if (dqs_in_valid) begin
@@ -2565,7 +2593,7 @@
     always @(dm_in[31]) dm_timing_check(31);
 
     task dq_timing_check;
-    input i;
+    input [6:0] i;
     reg [6:0] i;
     begin
         if (dqs_in_valid) begin
@@ -2712,7 +2740,7 @@
     always @(dq_in[127]) dq_timing_check(127);
    
     task dqs_pos_timing_check;
-    input i;
+    input [5:0] i;
     reg [5:0] i;
     reg [4:0] j;
     begin
@@ -2847,7 +2875,7 @@
     always @(negedge dqs_in[63]) if (!dqs_in[63]) dqs_pos_timing_check(63);
    
     task dqs_neg_timing_check;
-    input i;
+    input [5:0] i;
     reg [5:0] i;
     reg [4:0] j;
     begin
